<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.handl.spring.dubbo</groupId>
  <artifactId>dubbo-parent</artifactId>
  <version>1.0-SNAPSHOT</version>
  <modules>
    <module>dubboapi</module>
    <module>dubboprovider1</module>
    <module>dubboconsumer</module>
    <module>dubboprovider2</module>
  </modules>
  <packaging>pom</packaging>

  <name>dubbo-parent</name>
  <url>http://maven.apache.org</url>

  <properties>
    <springframework.name>org.springframework</springframework.name>
    <springframework.version>4.3.8.RELEASE</springframework.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!--  测试框架  -->
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
      </dependency>

      <!--  Spring框架相关  -->
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-core</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-context</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-web</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-aop</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-test</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-aspects</artifactId>
        <version>${springframework.version}</version>
      </dependency>
      <dependency>
        <groupId>${springframework.name}</groupId>
        <artifactId>spring-tx</artifactId>
        <version>${springframework.version}</version>
      </dependency>

      <!--dubbo-->
      <dependency>
        <groupId>com.101tec</groupId>
        <artifactId>zkclient</artifactId>
        <version>0.10</version>
      </dependency>

      <dependency>
        <groupId>org.apache.zookeeper</groupId>
        <artifactId>zookeeper</artifactId>
        <version>3.3.3</version>
      </dependency>

      <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>dubbo</artifactId>
        <version>2.5.3</version>
        <exclusions>
          <exclusion>
            <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
          </exclusion>
        </exclusions>
      </dependency>



      <!--  其他  -->
      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
      </dependency>
      <!--<dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-simple</artifactId>
          <version>1.7.25</version>
      </dependency>-->
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.25</version>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.7.25</version>
      </dependency>
      <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>1.2.17</version>
      </dependency>
      <!-- jsr250 @PostConstruct bean初始化  @PreDestroy bean销毁 -->
      <dependency>
        <groupId>javax.annotation</groupId>
        <artifactId>jsr250-api</artifactId>
        <version>1.0</version>
      </dependency>

    </dependencies>
  </dependencyManagement>


  <!-- 配置maven的生命周期和插件
      1、生命周期：对项目构建过程抽象
         构建过程：清理，初始化，编译，测试，打包，集成，部署和生成站点等等一系列的步骤
         注：生命周期和构建过程一一映射，生命周期本身不做任何工作，全部由插件来完成(类似于模板方法模式)

          clean生命周期：
                  pre-clean:执行一些清理前完成的工作
                  clean:清理上一次构建生成的文件
                  post-clean:执行一些清理后完成的工作
          default生命周期：构建所需步骤
                  。。。略
          site生命周期：建立和发布项目站点
                  pre-site:执行一些在项目生成站点之前完成的工作
                  site:生成项目站点文档
                  post-site:执行一些在项目生成站点之后完成的工作
                  site-deploy:将生成的项目站点发送到服务器

      2、插件：真正的完成构建过程的工作
         每个插件都对应多个目标(功能)，也就是一个插件可以做很多事情(提高了插件代码的复用性)
          插件对应目标的格式：插件名称:目标名称
          例如：插件maven-dependency-plugin有十多种目标，目标对应的maven-dependency-plugin插件格式：
                  dependency:analyze
                  dependency:tree
                  dependency:list
                这是一种通用的写法，冒号前面是插件前缀，后面是该插件的目标

      3、插件绑定：maven的生命周期与插件相互绑定，用于完成实际的构建任务
                  (也就是说生命周期的阶段与插件目标相互绑定)
                  例如：编译阶段(compile)绑定了maven-compile-plugin插件的compile目标

          除了maven做的内置的绑定，我们也可以自定义绑定：
              例如：创建项目的源码jar包
                  插件：maven-source-plugin
                  插件目标：jar-no-fork
                  生命周期阶段：default周期的verify阶段

      4、修改插件参数配置
          在命令行中可以通过 mvn 命令 -D参数名=值 进行配置(-D是java自带的系统参数修改属性)

          配置全局插件参数：作用于所有使用该插件所有目标的所有任务
              例如：修改maven-compiler-plugin使用jdk1.8版本来编译源文件，生成jdk1.8的字节码文件

          配置指定插件目标参数：作用于该插件指定目标的指定任务
              例如：maven-antrun-plugin插件有一个目标run，将不同配置的run目标绑定到多个任务上，
                  就可以在不同的阶段上执行不同的任务

      pluginManagement:插件管理，原理和作用和依赖管理一致(dependencyManagement)
                  子模块中显示声明，只需要在子模块中声明插件的groupId和artifactId

  -->
  <build><!-- 如果插件是官方提供的，则可以省略掉groupId -->
    <pluginManagement>
      <plugins>
        <!-- 自定义插件绑定，参考[maven的生命周期和插件]注释的3条 -->
        <plugin>
          <!-- 插件的groupId -->
          <groupId>org.apache.maven.plugins</groupId>
          <!-- 插件的artifactId -->
          <artifactId>maven-source-plugin</artifactId>
          <!-- 插件的版本 -->
          <version>2.1.1</version>
          <!-- 配置每一个插件目标绑定的周期阶段任务 -->
          <executions>
            <execution>
              <!-- 配置id为attach-source的任务 -->
              <id>attach-source</id>
              <!--将这个任务绑定到verify阶段，如果不写的话，将在插件目标默认的阶段执行 -->
              <phase>verify</phase>
              <!-- 给此任务配置执行的插件目标(对应任务)，如果配置多个目标，按顺序执行 -->
              <goals>
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- 配置全局插件参数，参考[maven的生命周期和插件]注释的4条 -->
        <plugin>
          <!-- 插件的groupId -->
          <groupId>org.apache.maven.plugins</groupId>
          <!-- 插件的artifactId -->
          <artifactId>maven-compiler-plugin</artifactId>
          <!-- 插件的版本 -->
          <version>2.1</version>
          <!-- configuration表示全局的插件配置 -->
          <configuration>
            <!-- 源代码使用jdk1.8 -->
            <source>1.8</source>
            <!-- 输出的class字节码使用jdk1.8 -->
            <target>1.8</target>
          </configuration>
        </plugin>

        <!-- 配置指定插件目标任务参数，参考[maven的生命周期和插件]注释的4条 -->
        <plugin>
          <!-- 插件的groupId -->
          <groupId>org.apache.maven.plugins</groupId>
          <!-- 插件的artifactId -->
          <artifactId>maven-antrun-plugin</artifactId>
          <!-- 插件的版本 -->
          <version>1.3</version>
          <!-- 配置每一个插件目标绑定的周期阶段任务 -->
          <executions>
            <execution>
              <!-- 配置id为ant-validata的任务 -->
              <id>ant-validata</id>
              <!--将这个任务绑定到validate阶段，如果不写的话，将在插件目标默认的阶段执行 -->
              <phase>validate</phase>
              <!-- 给此任务配置执行的插件目标(对应任务)，如果配置多个目标，按顺序执行 -->
              <goals>
                <goal>run</goal>
              </goals>
              <!--配置该插件目标对应任务的参数-->
              <configuration>
                <tasks>
                  <echo>I'm bound validata phase</echo>
                </tasks>
              </configuration>
            </execution>
            <execution>
              <!-- 配置id为ant-verify的任务 -->
              <id>ant-verify</id>
              <!--将这个任务绑定到verify阶段，如果不写的话，将在插件目标默认的阶段执行 -->
              <phase>verify</phase>
              <!-- 给此任务配置执行的插件目标(对应任务)，如果配置多个目标，按顺序执行 -->
              <goals>
                <goal>run</goal>
              </goals>
              <!--配置该插件目标对应任务的参数-->
              <configuration>
                <tasks>
                  <echo>I'm bound verify phase</echo>
                </tasks>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <!--在settings文件中配置依赖仓库和插件仓库 和 仓库镜像
      1、在pom中配置的依赖仓库和插件仓库只对当前maven项目有效
          在settings文件中配置的依赖仓库和插件仓库，对使用了此settings文件的maven项目都有效
      2、在settings文件中配置私服镜像
          因为maven配置默认的库是主仓库，在请求构建的时候还会去遍历所有仓库(包含主仓库)，
          这时我们需要把所有请求主仓库映射到nexus
      配置如下：
          <settings>
              ......
              <mirrors>
                      <mirror>
                          <id>nexus</id>
                          <name>Nexus</name>
                          <url>http://localhost:8081/nexus/content/groups/public/</url>
                          <mirrorOf>*</mirrorOf>
                      </mirror>
              </mirrors>
              <profiles>
                  <profile>
                      <id>nexus</id>
                      <repositories>
                          <repository>
                              <id>nexus</id>
                              <name>Nexus</name>
                              <url>http://localhost:8081/nexus/content/groups/public/</url>
                              <releases>
                                  <enabled>true</enabled>
                                  <updatePolicy>daily</updatePolicy>
                                  <checksumPolicy>warn</checksumPolicy>
                              </releases>
                              <snapshots>
                                  <enabled>true</enabled>
                                  <updatePolicy>daily</updatePolicy>
                                  <checksumPolicy>warn</checksumPolicy>
                              </snapshots>
                          </repository>
                      </repositories>

                      <pluginRepositories>
                          <pluginRepository>
                              <id>nexus</id>
                              <name>Nexus</name>
                              <url>http://localhost:8081/nexus/content/groups/public/</url>
                              <releases>
                                  <enabled>true</enabled>
                                  <updatePolicy>daily</updatePolicy>
                                  <checksumPolicy>warn</checksumPolicy>
                              </releases>
                              <snapshots>
                                  <enabled>true</enabled>
                                  <updatePolicy>daily</updatePolicy>
                                  <checksumPolicy>warn</checksumPolicy>
                              </snapshots>
                          </pluginRepository>
                      </pluginRepositories>
                  </profile>
              </profiles>
              <activeProfiles>
                  <activeProfile>nexus</activeProfile>
              </activeProfiles>
              ......
          </settings>

          <activeProfiles>:将nexus这个profile激活，这样当构建maven项目时，激活后的profile会将仓库配置应用到项目中去
  -->
  <!--在settings文件中配置私服镜像
      因为在pom中已经配置了远程仓库(maven的主仓库)，所有maven还是会请求maven主仓库
      这时我们需要把所有请求主仓库映射到nexus
      <settings>
      </settings>
  -->

  <!-- 配置远程仓库，包括私服nexus，代理仓库等等 -->
  <repositories>
    <repository>
      <!-- 声明仓库Id，如果重名则覆盖 -->
      <id>nexus</id>
      <!-- 仓库的名字 -->
      <name>Nexus</name>
      <!-- 远程仓库访问地址 -->
      <url>http://localhost:8081/nexus/content/groups/public/</url>
      <!-- default表示maven2和maven3的默认布局 -->
      <layout>default</layout>
      <!-- 发布版本配置 -->
      <releases>
        <!-- 下载 -->
        <enabled>true</enabled>
        <!-- 配置从远程仓库检查更新的频率，
            daily:每天检查一次，
            never:从不检查，
            always:每次构建就检查，
            interval:X :每隔X分钟检查一次 -->
        <updatePolicy>daily</updatePolicy>
        <!-- 配置检验文件的策略，
              warn:在执行构建时输出警告，
              fail:遇到构建错误就让构建失败，
              ignore:忽略校验和错误-->
        <checksumPolicy>warn</checksumPolicy>
      </releases>
      <!-- 快照版本配置 -->
      <snapshots>
        <!-- 不下载 -->
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </snapshots>
    </repository>
  </repositories>

  <!-- 配置远程插件仓库，包括私服nexus，代理仓库等等 -->
  <pluginRepositories>
    <pluginRepository>
      <!-- 声明插件仓库Id，如果重名则覆盖 -->
      <id>nexus</id>
      <!-- 插件仓库的名字 -->
      <name>Nexus</name>
      <!-- 远程插件仓库访问地址 -->
      <url>http://localhost:8081/nexus/content/groups/public/</url>
      <!-- default表示maven2和maven3的默认布局 -->
      <layout>default</layout>
      <!-- 发布版本配置 -->
      <releases>
        <!-- 下载 -->
        <enabled>true</enabled>
        <!-- 配置从远程插件仓库检查更新的频率，
            daily:每天检查一次，
            never:从不检查，
            always:每次构建就检查，
            interval:X :每隔X分钟检查一次 -->
        <updatePolicy>daily</updatePolicy>
        <!-- 配置检验文件的策略，
              warn:在执行构建时输出警告，
              fail:遇到构建错误就让构建失败，
              ignore:忽略校验和错误-->
        <checksumPolicy>warn</checksumPolicy>
      </releases>
      <!-- 快照版本配置 -->
      <snapshots>
        <!-- 不下载 -->
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
        <checksumPolicy>warn</checksumPolicy>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <!-- 将内部的构建部署到远程仓库 -->
  <!-- nexus库对于匿名用户是只读的，需要配置认证信息(settings) -->
  <distributionManagement>
    <!-- 发布版本的构建仓库 -->
    <repository>
      <id>nexus-repository</id>
      <name>Nexus Release Repository</name>
      <url>http://localhost:8081/nexus/content/repositories/releases/</url>
    </repository>
    <!-- 快照版本的构建仓库 -->
    <snapshotRepository>
      <id>nexus-snapshot</id>
      <name>Nexus Snapshot Repository</name>
      <url>http://localhost:8081/nexus/content/repositories/snapshots/</url>
    </snapshotRepository>
  </distributionManagement>

  <!--  maven的settings配置概括
      1.仓库认证，配置登入仓库的用户名和密码
          <settings>
                  ......
                  <servers>
                      <server>
                          <id>需要和在pom里配置的<repository>远程仓库id一致</id>
                          <username>handl</username>
                          <password>123456</password>
                      </server>
                  </servers>
                  ......
              </settings>
     2.镜像仓库：X仓库可以代替Y仓库，比如：中国的maven镜像仓库可以代替maven中央仓库
          <settings>
                  ......
                  <mirrors>
                      <mirror>
                          <id>该镜像的仓库Id</id>
                          <name>该镜像的仓库名称</name>
                          <url>该镜像的仓库访问地址</url>
                          <mirrorOf>配置被代替的仓库的Id</mirrorOf>
                      </mirror>
                  </mirrors>
                  ......
              </settings>

          镜像的用法一般是结合私服nexus，因为私服可以代理所有的外部仓库，
          把私服作为镜像，配置如下：
              <settings>
                  ......
                  <mirrors>
                      <mirror>
                          <id>私服仓库的Id</id>
                          <name>私服仓库名称</name>
                          <url>私服访问地址</url>
                          <mirrorOf>*(* : 代指匹配所有的被镜像仓库)</mirrorOf>
                      </mirror>
                  </mirrors>
                  ......
              </settings>
  -->
</project>
